openapi: 3.0.3
info:
    title: PEA - Pure Email Auth
    description: |
        - [Repository](https://github.com/JacobLinCool/pea)
        - [Demo](https://pea.csie.cool)
    contact:
        email: jacob@csie.cool
    license:
        name: MIT
        url: https://github.com/JacobLinCool/pea/blob/main/LICENSE
    version: 0.0.0
servers:
    - url: https://{server}/api
      variables:
          server:
              default: pea.csie.cool
              description: PEA Server
tags:
    - name: dev
      description: Everything about Developers
    - name: app
      description: Everything about Applications
paths:
    /app:
        post:
            tags:
                - app
            summary: Add a new application
            description: Add a new application
            operationId: addApp
            requestBody:
                description: Add a new application
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/App"
                required: true
            responses:
                "200":
                    description: Successful operation
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/App"
                "405":
                    description: Invalid input
            security:
                - petstore_auth:
                      - write:pets
                      - read:pets
    /pet/{petId}:
        get:
            tags:
                - pet
            summary: Find pet by ID
            description: Returns a single pet
            operationId: getPetById
            parameters:
                - name: petId
                  in: path
                  description: ID of pet to return
                  required: true
                  schema:
                      type: integer
                      format: int64
            responses:
                "200":
                    description: successful operation
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Pet"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Pet"
                "400":
                    description: Invalid ID supplied
                "404":
                    description: Pet not found
            security:
                - api_key: []
                - petstore_auth:
                      - write:pets
                      - read:pets
        post:
            tags:
                - pet
            summary: Updates a pet in the store with form data
            description: ""
            operationId: updatePetWithForm
            parameters:
                - name: petId
                  in: path
                  description: ID of pet that needs to be updated
                  required: true
                  schema:
                      type: integer
                      format: int64
                - name: name
                  in: query
                  description: Name of pet that needs to be updated
                  schema:
                      type: string
                - name: status
                  in: query
                  description: Status of pet that needs to be updated
                  schema:
                      type: string
            responses:
                "405":
                    description: Invalid input
            security:
                - petstore_auth:
                      - write:pets
                      - read:pets
        delete:
            tags:
                - pet
            summary: Deletes a pet
            description: delete a pet
            operationId: deletePet
            parameters:
                - name: api_key
                  in: header
                  description: ""
                  required: false
                  schema:
                      type: string
                - name: petId
                  in: path
                  description: Pet id to delete
                  required: true
                  schema:
                      type: integer
                      format: int64
            responses:
                "400":
                    description: Invalid pet value
            security:
                - petstore_auth:
                      - write:pets
                      - read:pets
    /pet/{petId}/uploadImage:
        post:
            tags:
                - pet
            summary: uploads an image
            description: ""
            operationId: uploadFile
            parameters:
                - name: petId
                  in: path
                  description: ID of pet to update
                  required: true
                  schema:
                      type: integer
                      format: int64
                - name: additionalMetadata
                  in: query
                  description: Additional Metadata
                  required: false
                  schema:
                      type: string
            requestBody:
                content:
                    application/octet-stream:
                        schema:
                            type: string
                            format: binary
            responses:
                "200":
                    description: successful operation
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ApiResponse"
            security:
                - petstore_auth:
                      - write:pets
                      - read:pets
    /store/inventory:
        get:
            tags:
                - store
            summary: Returns pet inventories by status
            description: Returns a map of status codes to quantities
            operationId: getInventory
            responses:
                "200":
                    description: successful operation
                    content:
                        application/json:
                            schema:
                                type: object
                                additionalProperties:
                                    type: integer
                                    format: int32
            security:
                - api_key: []
    /store/order:
        post:
            tags:
                - store
            summary: Place an order for a pet
            description: Place a new order in the store
            operationId: placeOrder
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Order"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/Order"
                    application/x-www-form-urlencoded:
                        schema:
                            $ref: "#/components/schemas/Order"
            responses:
                "200":
                    description: successful operation
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Order"
                "405":
                    description: Invalid input
    /store/order/{orderId}:
        get:
            tags:
                - store
            summary: Find purchase order by ID
            description: For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
            operationId: getOrderById
            parameters:
                - name: orderId
                  in: path
                  description: ID of order that needs to be fetched
                  required: true
                  schema:
                      type: integer
                      format: int64
            responses:
                "200":
                    description: successful operation
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Order"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Order"
                "400":
                    description: Invalid ID supplied
                "404":
                    description: Order not found
        delete:
            tags:
                - store
            summary: Delete purchase order by ID
            description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
            operationId: deleteOrder
            parameters:
                - name: orderId
                  in: path
                  description: ID of the order that needs to be deleted
                  required: true
                  schema:
                      type: integer
                      format: int64
            responses:
                "400":
                    description: Invalid ID supplied
                "404":
                    description: Order not found
components:
    schemas:
        Order:
            type: object
            properties:
                id:
                    type: integer
                    format: int64
                    example: 10
                petId:
                    type: integer
                    format: int64
                    example: 198772
                quantity:
                    type: integer
                    format: int32
                    example: 7
                shipDate:
                    type: string
                    format: date-time
                status:
                    type: string
                    description: Order Status
                    example: approved
                    enum:
                        - placed
                        - approved
                        - delivered
                complete:
                    type: boolean
            xml:
                name: order
        Customer:
            type: object
            properties:
                id:
                    type: integer
                    format: int64
                    example: 100000
                username:
                    type: string
                    example: fehguy
                address:
                    type: array
                    xml:
                        name: addresses
                        wrapped: true
                    items:
                        $ref: "#/components/schemas/Address"
            xml:
                name: customer
        Address:
            type: object
            properties:
                street:
                    type: string
                    example: 437 Lytton
                city:
                    type: string
                    example: Palo Alto
                state:
                    type: string
                    example: CA
                zip:
                    type: string
                    example: "94301"
            xml:
                name: address
        Category:
            type: object
            properties:
                id:
                    type: integer
                    format: int64
                    example: 1
                name:
                    type: string
                    example: Dogs
            xml:
                name: category
        User:
            type: object
            properties:
                id:
                    type: integer
                    format: int64
                    example: 10
                username:
                    type: string
                    example: theUser
                firstName:
                    type: string
                    example: John
                lastName:
                    type: string
                    example: James
                email:
                    type: string
                    example: john@email.com
                password:
                    type: string
                    example: "12345"
                phone:
                    type: string
                    example: "12345"
                userStatus:
                    type: integer
                    description: User Status
                    format: int32
                    example: 1
            xml:
                name: user
        Tag:
            type: object
            properties:
                id:
                    type: integer
                    format: int64
                name:
                    type: string
            xml:
                name: tag
        Pet:
            required:
                - name
                - photoUrls
            type: object
            properties:
                id:
                    type: integer
                    format: int64
                    example: 10
                name:
                    type: string
                    example: doggie
                category:
                    $ref: "#/components/schemas/Category"
                photoUrls:
                    type: array
                    xml:
                        wrapped: true
                    items:
                        type: string
                        xml:
                            name: photoUrl
                tags:
                    type: array
                    xml:
                        wrapped: true
                    items:
                        $ref: "#/components/schemas/Tag"
                status:
                    type: string
                    description: pet status in the store
                    enum:
                        - available
                        - pending
                        - sold
            xml:
                name: pet
        ApiResponse:
            type: object
            properties:
                code:
                    type: integer
                    format: int32
                type:
                    type: string
                message:
                    type: string
            xml:
                name: "##default"
    requestBodies:
        App:
            description: App object
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/App"
    securitySchemes:
        api_key:
            type: apiKey
            name: api_key
            in: header
